
            int block_id = item.get_group_linear_id();
            int thread_id = item.get_local_linear_id();
            int i = item.get_global_linear_id();
            int THREADS_PER_BLOCK = item.get_local_range().get(0);
	int y;
	int indX, indY;
float u, v;
	

	if(i < Nparticles){
		arrayX_acc[i] = xj_acc[i]; 
		arrayY_acc[i] = yj_acc[i]; 

		weights_acc[i] = 1 / ((float) (Nparticles)); 
		seed_acc[i] = (A*seed_acc[i] + C) % M;
		u = cl::sycl::fabs(seed_acc[i]/((float)M));
		seed_acc[i] = (A*seed_acc[i] + C) % M;
		v = cl::sycl::fabs(seed_acc[i]/((float)M));
		arrayX_acc[i] += 1.0 + 5.0*(cl::sycl::sqrt(-2*cl::sycl::log(u))*cl::sycl::cos(2*PI*v));

		seed_acc[i] = (A*seed_acc[i] + C) % M;
		u = cl::sycl::fabs(seed_acc[i]/((float)M));
		seed_acc[i] = (A*seed_acc[i] + C) % M;
		v = cl::sycl::fabs(seed_acc[i]/((float)M));
		arrayY_acc[i] += -2.0 + 2.0*(cl::sycl::sqrt(-2*cl::sycl::log(u))*cl::sycl::cos(2*PI*v));

	}

        item.barrier(access::fence_space::global_space);


	if(i < Nparticles)
	{
		for(y = 0; y < countOnes; y++){

			int iX = arrayX_acc[i];
			int iY = arrayY_acc[i];
			int rnd_iX = (arrayX_acc[i] - iX) < .5f ? iX : iX++;
			int rnd_iY = (arrayY_acc[i] - iY) < .5f ? iY : iY++;
			indX = rnd_iX + objxy_acc[y*2 + 1];
			indY = rnd_iY + objxy_acc[y*2];

			ind_acc[i*countOnes + y] = cl::sycl::abs(indX*IszY*Nfr + indY*Nfr + k);
			if(ind_acc[i*countOnes + y] >= max_size)
				ind_acc[i*countOnes + y] = 0;
		}
		float likelihoodSum = 0.0;
		for(int x = 0; x < countOnes; x++)
		      likelihoodSum += ((I_acc[ind_acc[i*countOnes + x]] - 100) * (I_acc[ind_acc[i*countOnes + x]] - 100) -
                                        (I_acc[ind_acc[i*countOnes + x]] - 228) * (I_acc[ind_acc[i*countOnes + x]] - 228)) / 50.0;
		likelihood_acc[i] = likelihoodSum/countOnes-SCALE_FACTOR;

		weights_acc[i] = weights_acc[i] * cl::sycl::exp(likelihood_acc[i]); //Donnie Newell - added the missing exponential function call

	}
	
	weights_local[thread_id] = 0.0; //weights_local[thread_id] = i;
		
        item.barrier();


	if(i < Nparticles){
		weights_local[thread_id] = weights_acc[i];
	}

        item.barrier(access::fence_space::local_space);

	//for(unsigned int s=get_local_size(0)/2; s>0; s>>=1)
	for(unsigned int s=THREADS_PER_BLOCK/2; s>0; s>>=1)
	{
		if(thread_id < s)
		{
			weights_local[thread_id] += weights_local[thread_id + s];
		}
        item.barrier(access::fence_space::local_space);
	}
	if(thread_id == 0)
	{
		partial_sums_acc[block_id] = weights_local[0];
	}
