unsigned int tid = item.get_global_id(0);

// source index
unsigned int offset = tid * original_num_block_elements;//DPB,
unsigned int bitsize = cindex[tid];

// destination index
unsigned int pos = cindex2[tid], dword = pos / 32, bit = pos % 32;

unsigned int i, dw, tmp;
dw = srcData[offset];	                // load the first dword from srcData[]
tmp = dw >> bit;                      // cut off those bits that do not fit into the initial location in destData[]
atomic_fetch_or(dstData[dword], tmp);	// fill up this initial location
//tmp = dw << (32-bit);			          // save the remaining bits in tmp (like before)
tmp = (unsigned int)((unsigned long)dw << (32-bit));    // save the remaining bits that were cut off earlier in tmp
for (i=1; i<bitsize/32; i++) {	      // from now on, we have exclusive access to destData[]
  dw = srcData[offset+i];		          // load next dword from srcData[]
  tmp |= (dw >> bit);			            // fill up tmp
  dstData[dword+i].store(tmp);		    // write complete dword to destData[]
  //tmp = dw << (32-bit);			        // save the remaining bits in tmp (like before)
  tmp = (unsigned int)((unsigned long)dw << (32-bit)); // save the remaining bits that were cut off earlier in tmp
}

// exclusive access to dstData[] ends here
// the remaining block can, or rather should be further optimized
// write the remaining bits in tmp, UNLESS bit is 0 and bitsize is divisible by 32, in this case do nothing
if (bit != 0 || bitsize % 32 != 0)
  atomic_fetch_or(dstData[dword+i], tmp);

if (bitsize % 32 != 0) {
  dw = srcData[offset+i];
  atomic_fetch_or(dstData[dword+i], dw >> bit);
  //atomic_fetch_or(dstData[dword+i+1], dw << (32-bit));
  atomic_fetch_or(dstData[dword+i+1], (unsigned int)((unsigned long)dw << (32-bit)) );
}


