dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C copy.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C err.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
err.c:62:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
{         "unknown error",                          /* 0 */
          ^
err.c:63:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "sizes of objects don't match",           /* 1 */
          ^
err.c:64:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "index out of bounds",                    /* 2 */
          ^
err.c:65:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't allocate memory",                  /* 3 */
          ^
err.c:66:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "singular matrix",                        /* 4 */
          ^
err.c:67:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not positive definite",           /* 5 */
          ^
err.c:68:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "incorrect format input",                 /* 6 */
          ^
err.c:69:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad input file/device",                  /* 7 */
          ^
err.c:70:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "NULL objects passed",                    /* 8 */
          ^
err.c:71:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not square",                      /* 9 */
          ^
err.c:72:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "object out of range",                    /* 10 */
          ^
err.c:73:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ for non-square matrix",   /* 11 */
          ^
err.c:74:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ",             /* 12 */
          ^
err.c:75:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "excessive number of iterations",         /* 13 */
          ^
err.c:76:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "convergence criterion failed",           /* 14 */
          ^
err.c:77:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad starting value",                     /* 15 */
          ^
err.c:78:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "floating exception",                     /* 16 */
          ^
err.c:79:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "internal inconsistency (data structure)",/* 17 */
          ^
err.c:80:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "unexpected end-of-file",                 /* 18 */
          ^
err.c:81:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "shared vectors (cannot release them)",   /* 19 */  
          ^
err.c:82:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "negative argument",                      /* 20 */
          ^
err.c:83:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "cannot overwrite object",                /* 21 */
          ^
err.c:84:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "breakdown in iterative method"           /* 22 */
          ^
err.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "unknown warning",                             /* 0 */
   ^
err.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "wrong type number (use macro TYPE_*)",        /* 1 */
   ^
err.c:92:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "no corresponding mem_stat_mark",              /* 2 */
   ^
err.c:93:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "computed norm of a residual is less than 0",  /* 3 */
   ^
err.c:94:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "resizing a shared vector"                     /* 4 */
   ^
28 warnings generated.
err.c:62:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
{         "unknown error",                          /* 0 */
          ^
err.c:63:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "sizes of objects don't match",           /* 1 */
          ^
err.c:64:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "index out of bounds",                    /* 2 */
          ^
err.c:65:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't allocate memory",                  /* 3 */
          ^
err.c:66:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "singular matrix",                        /* 4 */
          ^
err.c:67:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not positive definite",           /* 5 */
          ^
err.c:68:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "incorrect format input",                 /* 6 */
          ^
err.c:69:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad input file/device",                  /* 7 */
          ^
err.c:70:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "NULL objects passed",                    /* 8 */
          ^
err.c:71:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not square",                      /* 9 */
          ^
err.c:72:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "object out of range",                    /* 10 */
          ^
err.c:73:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ for non-square matrix",   /* 11 */
          ^
err.c:74:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ",             /* 12 */
          ^
err.c:75:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "excessive number of iterations",         /* 13 */
          ^
err.c:76:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "convergence criterion failed",           /* 14 */
          ^
err.c:77:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad starting value",                     /* 15 */
          ^
err.c:78:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "floating exception",                     /* 16 */
          ^
err.c:79:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "internal inconsistency (data structure)",/* 17 */
          ^
err.c:80:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "unexpected end-of-file",                 /* 18 */
          ^
err.c:81:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "shared vectors (cannot release them)",   /* 19 */  
          ^
err.c:82:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "negative argument",                      /* 20 */
          ^
err.c:83:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "cannot overwrite object",                /* 21 */
          ^
err.c:84:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "breakdown in iterative method"           /* 22 */
          ^
err.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "unknown warning",                             /* 0 */
   ^
err.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "wrong type number (use macro TYPE_*)",        /* 1 */
   ^
err.c:92:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "no corresponding mem_stat_mark",              /* 2 */
   ^
err.c:93:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "computed norm of a residual is less than 0",  /* 3 */
   ^
err.c:94:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "resizing a shared vector"                     /* 4 */
   ^
28 warnings generated.
err.c:62:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
{         "unknown error",                          /* 0 */
          ^
err.c:63:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "sizes of objects don't match",           /* 1 */
          ^
err.c:64:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "index out of bounds",                    /* 2 */
          ^
err.c:65:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't allocate memory",                  /* 3 */
          ^
err.c:66:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "singular matrix",                        /* 4 */
          ^
err.c:67:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not positive definite",           /* 5 */
          ^
err.c:68:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "incorrect format input",                 /* 6 */
          ^
err.c:69:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad input file/device",                  /* 7 */
          ^
err.c:70:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "NULL objects passed",                    /* 8 */
          ^
err.c:71:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "matrix not square",                      /* 9 */
          ^
err.c:72:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "object out of range",                    /* 10 */
          ^
err.c:73:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ for non-square matrix",   /* 11 */
          ^
err.c:74:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "can't do operation in situ",             /* 12 */
          ^
err.c:75:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "excessive number of iterations",         /* 13 */
          ^
err.c:76:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "convergence criterion failed",           /* 14 */
          ^
err.c:77:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "bad starting value",                     /* 15 */
          ^
err.c:78:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "floating exception",                     /* 16 */
          ^
err.c:79:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "internal inconsistency (data structure)",/* 17 */
          ^
err.c:80:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "unexpected end-of-file",                 /* 18 */
          ^
err.c:81:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "shared vectors (cannot release them)",   /* 19 */  
          ^
err.c:82:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "negative argument",                      /* 20 */
          ^
err.c:83:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "cannot overwrite object",                /* 21 */
          ^
err.c:84:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
          "breakdown in iterative method"           /* 22 */
          ^
err.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "unknown warning",                             /* 0 */
   ^
err.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "wrong type number (use macro TYPE_*)",        /* 1 */
   ^
err.c:92:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "no corresponding mem_stat_mark",              /* 2 */
   ^
err.c:93:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "computed norm of a residual is less than 0",  /* 3 */
   ^
err.c:94:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "resizing a shared vector"                     /* 4 */
   ^
28 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C matrixio.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C memory.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
memory.c:556:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:556:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:556:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:573:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:573:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:573:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:589:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:589:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:589:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:605:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:605:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:605:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:637:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:637:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:637:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:655:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:655:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:655:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:671:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:671:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:671:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:688:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:688:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:688:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:719:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:719:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:719:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:739:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:739:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:739:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:759:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:759:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:759:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:778:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:778:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:778:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
12 warnings generated.
memory.c:556:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:556:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:556:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:573:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:573:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:573:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:589:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:589:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:589:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:605:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:605:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:605:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:637:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:637:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:637:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:655:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:655:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:655:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:671:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:671:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:671:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:688:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:688:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:688:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:719:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:719:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:719:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:739:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:739:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:739:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:759:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:759:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:759:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:778:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:778:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:778:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
12 warnings generated.
memory.c:556:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:556:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:556:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:573:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:573:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:573:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:589:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:589:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:589:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:605:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:605:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:605:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:637:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:637:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:637:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:655:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:655:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:655:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:671:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:671:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:671:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:688:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:688:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:688:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:719:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:719:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:719:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:739:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:739:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:739:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,IVEC **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:759:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memory.c:759:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
          (                       )
memory.c:759:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,PERM **)) {   /* NULL ends the list*/
              ^
              ==
memory.c:778:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
memory.c:778:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
          (                      )
memory.c:778:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,MAT **)) {   /* NULL ends the list*/
              ^
              ==
12 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C vecop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
vecop.c:315:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~
vecop.c:315:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
          (                     )
vecop.c:315:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
vecop.c:315:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~
vecop.c:315:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
          (                     )
vecop.c:315:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
vecop.c:315:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~
vecop.c:315:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
          (                     )
vecop.c:315:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,VEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C matop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C pxop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C submat.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C init.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C otherio.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C machine.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
machine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: machine.c,v 1.4 1994/01/13 05:28:56 des Exp $";
                         ^
machine.c:51:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:52:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register Real     sum;
    ^~~~~~~~~
machine.c:88:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:118:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:132:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:146:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
7 warnings generated.
machine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: machine.c,v 1.4 1994/01/13 05:28:56 des Exp $";
                         ^
machine.c:51:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:52:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register Real     sum;
    ^~~~~~~~~
machine.c:88:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:118:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:132:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:146:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
7 warnings generated.
machine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: machine.c,v 1.4 1994/01/13 05:28:56 des Exp $";
                         ^
machine.c:51:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:52:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register Real     sum;
    ^~~~~~~~~
machine.c:88:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:118:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:132:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
machine.c:146:5: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
    register int        i;
    ^~~~~~~~~
7 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C matlab.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C ivecop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C version.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C meminfo.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
meminfo.c:53:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "MAT",
   ^
meminfo.c:54:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "BAND",
   ^
meminfo.c:55:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "PERM",
   ^
meminfo.c:56:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "VEC",
   ^
meminfo.c:57:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "IVEC"
   ^
meminfo.c:59:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     ,"ITER",
      ^
meminfo.c:60:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPROW",
     ^
meminfo.c:61:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPMAT"
     ^
meminfo.c:64:9: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       ,"ZVEC",
        ^
meminfo.c:65:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       "ZMAT"
       ^
10 warnings generated.
meminfo.c:53:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "MAT",
   ^
meminfo.c:54:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "BAND",
   ^
meminfo.c:55:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "PERM",
   ^
meminfo.c:56:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "VEC",
   ^
meminfo.c:57:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "IVEC"
   ^
meminfo.c:59:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     ,"ITER",
      ^
meminfo.c:60:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPROW",
     ^
meminfo.c:61:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPMAT"
     ^
meminfo.c:64:9: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       ,"ZVEC",
        ^
meminfo.c:65:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       "ZMAT"
       ^
10 warnings generated.
meminfo.c:53:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "MAT",
   ^
meminfo.c:54:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "BAND",
   ^
meminfo.c:55:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "PERM",
   ^
meminfo.c:56:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "VEC",
   ^
meminfo.c:57:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   "IVEC"
   ^
meminfo.c:59:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     ,"ITER",
      ^
meminfo.c:60:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPROW",
     ^
meminfo.c:61:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
     "SPMAT"
     ^
meminfo.c:64:9: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       ,"ZVEC",
        ^
meminfo.c:65:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       "ZMAT"
       ^
10 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C memstat.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
memstat.c:379:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memstat.c:379:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
          (                       )
memstat.c:379:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
memstat.c:379:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memstat.c:379:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
          (                       )
memstat.c:379:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
memstat.c:379:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
memstat.c:379:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
          (                       )
memstat.c:379:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,void **)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
ar ru meschach.a copy.o err.o matrixio.o memory.o vecop.o matop.o pxop.o submat.o init.o otherio.o machine.o matlab.o ivecop.o version.o meminfo.o memstat.o; ranlib meschach.a
ar: `u' modifier ignored since `D' is the default (see `U')
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C lufactor.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
lufactor.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"lufactor.c"
^
lufactor.c:218:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"lufactor.c"
^
lufactor.c:219:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"lufactor.c"
^
lufactor.c:220:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"lufactor.c"
^
lufactor.c:221:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"lufactor.c"
^
lufactor.c:265:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"lufactor.c"
^
lufactor.c:266:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"lufactor.c"
^
7 warnings generated.
lufactor.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"lufactor.c"
^
lufactor.c:218:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"lufactor.c"
^
lufactor.c:219:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"lufactor.c"
^
lufactor.c:220:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"lufactor.c"
^
lufactor.c:221:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"lufactor.c"
^
lufactor.c:265:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"lufactor.c"
^
lufactor.c:266:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"lufactor.c"
^
7 warnings generated.
lufactor.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"lufactor.c"
^
lufactor.c:218:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"lufactor.c"
^
lufactor.c:219:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"lufactor.c"
^
lufactor.c:220:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"lufactor.c"
^
lufactor.c:221:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"lufactor.c"
^
lufactor.c:265:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"lufactor.c"
^
lufactor.c:266:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"lufactor.c"
^
7 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C bkpfacto.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
bkpfacto.c:253:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"bkpfacto.c"
^
1 warning generated.
bkpfacto.c:253:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"bkpfacto.c"
^
1 warning generated.
bkpfacto.c:253:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"bkpfacto.c"
^
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C chfactor.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
chfactor.c:132:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(r,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"chfactor.c"
^
1 warning generated.
chfactor.c:132:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(r,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"chfactor.c"
^
1 warning generated.
chfactor.c:132:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(r,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"chfactor.c"
^
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C qrfactor.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
qrfactor.c:83:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(hh,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:84:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w, TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:132:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:133:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:134:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:135:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:269:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:270:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:343:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:378:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:528:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"qrfactor.c"
^
11 warnings generated.
qrfactor.c:83:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(hh,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:84:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w, TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:132:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:133:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:134:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:135:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:269:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:270:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:343:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:378:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:528:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"qrfactor.c"
^
11 warnings generated.
qrfactor.c:83:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(hh,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:84:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w, TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:132:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:133:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:134:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:135:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:269:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:270:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:343:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:378:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"qrfactor.c"
^
qrfactor.c:528:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"qrfactor.c"
^
11 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C solve.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C hsehldr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
hsehldr.c:190:3: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
  MEM_STAT_REG(w,TYPE_VEC);
  ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"hsehldr.c"
^
1 warning generated.
hsehldr.c:190:3: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
  MEM_STAT_REG(w,TYPE_VEC);
  ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"hsehldr.c"
^
1 warning generated.
hsehldr.c:190:3: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
  MEM_STAT_REG(w,TYPE_VEC);
  ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"hsehldr.c"
^
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C givens.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C update.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C norm.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C hessen.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
hessen.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(hh,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"hessen.c"
^
hessen.c:66:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"hessen.c"
^
hessen.c:117:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:73:1: note: expanded from here
"hessen.c"
^
hessen.c:118:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"hessen.c"
^
4 warnings generated.
hessen.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(hh,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"hessen.c"
^
hessen.c:66:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"hessen.c"
^
hessen.c:117:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:73:1: note: expanded from here
"hessen.c"
^
hessen.c:118:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"hessen.c"
^
4 warnings generated.
hessen.c:65:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(hh,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"hessen.c"
^
hessen.c:66:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w, TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"hessen.c"
^
hessen.c:117:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:73:1: note: expanded from here
"hessen.c"
^
hessen.c:118:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"hessen.c"
^
4 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C symmeig.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
symmeig.c:201:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"symmeig.c"
^
symmeig.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(b,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"symmeig.c"
^
symmeig.c:203:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(diag,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"symmeig.c"
^
symmeig.c:204:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(beta,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"symmeig.c"
^
4 warnings generated.
symmeig.c:201:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"symmeig.c"
^
symmeig.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(b,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"symmeig.c"
^
symmeig.c:203:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(diag,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"symmeig.c"
^
symmeig.c:204:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(beta,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"symmeig.c"
^
4 warnings generated.
symmeig.c:201:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_MAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"symmeig.c"
^
symmeig.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(b,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"symmeig.c"
^
symmeig.c:203:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(diag,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"symmeig.c"
^
symmeig.c:204:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(beta,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"symmeig.c"
^
4 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C schur.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
schur.c:176:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"schur.c"
^
schur.c:177:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(beta,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"schur.c"
^
schur.c:533:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"schur.c"
^
schur.c:534:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"schur.c"
^
schur.c:535:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"schur.c"
^
schur.c:536:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"schur.c"
^
6 warnings generated.
schur.c:176:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"schur.c"
^
schur.c:177:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(beta,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"schur.c"
^
schur.c:533:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"schur.c"
^
schur.c:534:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"schur.c"
^
schur.c:535:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"schur.c"
^
schur.c:536:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"schur.c"
^
6 warnings generated.
schur.c:176:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"schur.c"
^
schur.c:177:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(beta,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"schur.c"
^
schur.c:533:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"schur.c"
^
schur.c:534:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"schur.c"
^
schur.c:535:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_re,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"schur.c"
^
schur.c:536:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2_im,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"schur.c"
^
6 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C svd.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
svd.c:328:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"svd.c"
^
svd.c:329:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"svd.c"
^
svd.c:330:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"svd.c"
^
svd.c:402:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(f,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"svd.c"
^
4 warnings generated.
svd.c:328:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"svd.c"
^
svd.c:329:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"svd.c"
^
svd.c:330:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"svd.c"
^
svd.c:402:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(f,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"svd.c"
^
4 warnings generated.
svd.c:328:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"svd.c"
^
svd.c:329:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"svd.c"
^
svd.c:330:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"svd.c"
^
svd.c:402:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(f,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"svd.c"
^
4 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C fft.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C mfunc.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
mfunc.c:118:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(wkspace,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"mfunc.c"
^
mfunc.c:122:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       MEM_STAT_REG(tmp,TYPE_MAT);
       ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"mfunc.c"
^
mfunc.c:178:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"mfunc.c"
^
mfunc.c:179:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(D,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"mfunc.c"
^
mfunc.c:180:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"mfunc.c"
^
mfunc.c:209:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(c1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"mfunc.c"
^
mfunc.c:215:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"mfunc.c"
^
mfunc.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"mfunc.c"
^
mfunc.c:272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(pivot,TYPE_PERM);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"mfunc.c"
^
mfunc.c:360:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"mfunc.c"
^
mfunc.c:362:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"mfunc.c"
^
mfunc.c:384:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"mfunc.c"
^
12 warnings generated.
mfunc.c:118:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(wkspace,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"mfunc.c"
^
mfunc.c:122:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       MEM_STAT_REG(tmp,TYPE_MAT);
       ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"mfunc.c"
^
mfunc.c:178:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"mfunc.c"
^
mfunc.c:179:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(D,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"mfunc.c"
^
mfunc.c:180:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"mfunc.c"
^
mfunc.c:209:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(c1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"mfunc.c"
^
mfunc.c:215:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"mfunc.c"
^
mfunc.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"mfunc.c"
^
mfunc.c:272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(pivot,TYPE_PERM);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"mfunc.c"
^
mfunc.c:360:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"mfunc.c"
^
mfunc.c:362:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"mfunc.c"
^
mfunc.c:384:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"mfunc.c"
^
12 warnings generated.
mfunc.c:118:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(wkspace,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"mfunc.c"
^
mfunc.c:122:8: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
       MEM_STAT_REG(tmp,TYPE_MAT);
       ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"mfunc.c"
^
mfunc.c:178:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"mfunc.c"
^
mfunc.c:179:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(D,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:275:1: note: expanded from here
"mfunc.c"
^
mfunc.c:180:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"mfunc.c"
^
mfunc.c:209:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(c1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"mfunc.c"
^
mfunc.c:215:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"mfunc.c"
^
mfunc.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"mfunc.c"
^
mfunc.c:272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(pivot,TYPE_PERM);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"mfunc.c"
^
mfunc.c:360:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Apow,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:293:1: note: expanded from here
"mfunc.c"
^
mfunc.c:362:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"mfunc.c"
^
mfunc.c:384:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Y,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"mfunc.c"
^
12 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C bdfactor.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
ar ru meschach.a lufactor.o bkpfacto.o chfactor.o qrfactor.o solve.o hsehldr.o givens.o update.o norm.o hessen.o symmeig.o schur.o svd.o fft.o mfunc.o bdfactor.o; ranlib meschach.a
ar: `u' modifier ignored since `D' is the default (see `U')
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C sparse.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
sparse.c:534:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"sparse.c"
^
sparse.c:589:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"sparse.c"
^
sparse.c:645:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"sparse.c"
^
sparse.c:745:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(scratch,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:329:1: note: expanded from here
"sparse.c"
^
sparse.c:996:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:996:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:996:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1026:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1026:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1026:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1055:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1055:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1055:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
7 warnings generated.
sparse.c:534:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"sparse.c"
^
sparse.c:589:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"sparse.c"
^
sparse.c:645:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"sparse.c"
^
sparse.c:745:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(scratch,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:329:1: note: expanded from here
"sparse.c"
^
sparse.c:996:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:996:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:996:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1026:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1026:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1026:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1055:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1055:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1055:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
7 warnings generated.
sparse.c:534:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"sparse.c"
^
sparse.c:589:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"sparse.c"
^
sparse.c:645:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(tmp,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"sparse.c"
^
sparse.c:745:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(scratch,TYPE_SPROW);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:329:1: note: expanded from here
"sparse.c"
^
sparse.c:996:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:996:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:996:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1026:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1026:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1026:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
sparse.c:1055:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~~
sparse.c:1055:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
          (                        )
sparse.c:1055:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,SPMAT **)) {   /* NULL ends the list*/
              ^
              ==
7 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C sprow.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:88:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register row_elt     *r_elt;
   ^~~~~~~~~
4 warnings generated.
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:88:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register row_elt     *r_elt;
   ^~~~~~~~~
4 warnings generated.
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:86:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register int         lo, hi, mid;
   ^~~~~~~~~
sprow.c:88:4: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
   register row_elt     *r_elt;
   ^~~~~~~~~
4 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C sparseio.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C spchfctr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:61:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register Real           sum;
        ^~~~~~~~~
spchfctr.c:135:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        row_elt *elts;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:200:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
spchfctr.c:475:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
8 warnings generated.
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:61:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register Real           sum;
        ^~~~~~~~~
spchfctr.c:135:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        row_elt *elts;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:200:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
spchfctr.c:475:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
8 warnings generated.
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:60:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register row_elt        *elts1, *elts2;
        ^~~~~~~~~
spchfctr.c:61:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register Real           sum;
        ^~~~~~~~~
spchfctr.c:135:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        row_elt *elts;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:137:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        Real    sum, tmp;
        ^~~~~~~~
spchfctr.c:200:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
spchfctr.c:475:2: warning: 'register' storage class specifier is deprecated and incompatible with C++17 [-Wdeprecated-register]
        register        int     i;
        ^~~~~~~~~
8 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C splufctr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
splufctr.c:71:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(col_vals,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"splufctr.c"
^
splufctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
           MEM_STAT_REG(merge,TYPE_SPROW);
           ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"splufctr.c"
^
splufctr.c:249:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"splufctr.c"
^
3 warnings generated.
splufctr.c:71:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(col_vals,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"splufctr.c"
^
splufctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
           MEM_STAT_REG(merge,TYPE_SPROW);
           ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"splufctr.c"
^
splufctr.c:249:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"splufctr.c"
^
3 warnings generated.
splufctr.c:71:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(col_vals,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"splufctr.c"
^
splufctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
           MEM_STAT_REG(merge,TYPE_SPROW);
           ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"splufctr.c"
^
splufctr.c:249:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"splufctr.c"
^
3 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C spbkp.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
spbkp.c:647:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(deg_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"spbkp.c"
^
spbkp.c:648:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(order,TYPE_PERM);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"spbkp.c"
^
spbkp.c:656:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_row,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"spbkp.c"
^
spbkp.c:657:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"spbkp.c"
^
spbkp.c:658:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(col_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"spbkp.c"
^
spbkp.c:659:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"spbkp.c"
^
spbkp.c:660:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig1_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"spbkp.c"
^
spbkp.c:661:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp_iv,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"spbkp.c"
^
spbkp.c:1332:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"spbkp.c"
^
9 warnings generated.
spbkp.c:647:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(deg_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"spbkp.c"
^
spbkp.c:648:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(order,TYPE_PERM);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"spbkp.c"
^
spbkp.c:656:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_row,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"spbkp.c"
^
spbkp.c:657:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"spbkp.c"
^
spbkp.c:658:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(col_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"spbkp.c"
^
spbkp.c:659:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"spbkp.c"
^
spbkp.c:660:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig1_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"spbkp.c"
^
spbkp.c:661:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp_iv,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"spbkp.c"
^
spbkp.c:1332:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"spbkp.c"
^
9 warnings generated.
spbkp.c:647:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(deg_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"spbkp.c"
^
spbkp.c:648:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(order,TYPE_PERM);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"spbkp.c"
^
spbkp.c:656:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_row,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"spbkp.c"
^
spbkp.c:657:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(scan_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"spbkp.c"
^
spbkp.c:658:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(col_list,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"spbkp.c"
^
spbkp.c:659:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"spbkp.c"
^
spbkp.c:660:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(orig1_idx,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"spbkp.c"
^
spbkp.c:661:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp_iv,TYPE_IVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"spbkp.c"
^
spbkp.c:1332:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"spbkp.c"
^
9 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C spswap.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C iter0.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C itersym.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
itersym.c:126:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:257:1: note: expanded from here
"itersym.c"
^
itersym.c:127:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"itersym.c"
^
itersym.c:128:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"itersym.c"
^
itersym.c:132:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"itersym.c"
^
itersym.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"itersym.c"
^
itersym.c:224:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"itersym.c"
^
itersym.c:225:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"itersym.c"
^
itersym.c:442:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"itersym.c"
^
itersym.c:458:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(a2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"itersym.c"
^
itersym.c:459:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:299:1: note: expanded from here
"itersym.c"
^
itersym.c:580:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"itersym.c"
^
itersym.c:581:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"itersym.c"
^
itersym.c:582:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"itersym.c"
^
itersym.c:586:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"itersym.c"
^
14 warnings generated.
itersym.c:126:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:257:1: note: expanded from here
"itersym.c"
^
itersym.c:127:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"itersym.c"
^
itersym.c:128:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"itersym.c"
^
itersym.c:132:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"itersym.c"
^
itersym.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"itersym.c"
^
itersym.c:224:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"itersym.c"
^
itersym.c:225:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"itersym.c"
^
itersym.c:442:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"itersym.c"
^
itersym.c:458:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(a2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"itersym.c"
^
itersym.c:459:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:299:1: note: expanded from here
"itersym.c"
^
itersym.c:580:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"itersym.c"
^
itersym.c:581:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"itersym.c"
^
itersym.c:582:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"itersym.c"
^
itersym.c:586:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"itersym.c"
^
14 warnings generated.
itersym.c:126:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:257:1: note: expanded from here
"itersym.c"
^
itersym.c:127:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"itersym.c"
^
itersym.c:128:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"itersym.c"
^
itersym.c:132:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"itersym.c"
^
itersym.c:223:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:277:1: note: expanded from here
"itersym.c"
^
itersym.c:224:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"itersym.c"
^
itersym.c:225:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"itersym.c"
^
itersym.c:442:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"itersym.c"
^
itersym.c:458:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(a2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:297:1: note: expanded from here
"itersym.c"
^
itersym.c:459:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(b2,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:299:1: note: expanded from here
"itersym.c"
^
itersym.c:580:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"itersym.c"
^
itersym.c:581:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:311:1: note: expanded from here
"itersym.c"
^
itersym.c:582:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:313:1: note: expanded from here
"itersym.c"
^
itersym.c:586:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:315:1: note: expanded from here
"itersym.c"
^
14 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C iternsym.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
iternsym.c:87:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"iternsym.c"
^
iternsym.c:88:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"iternsym.c"
^
iternsym.c:89:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"iternsym.c"
^
iternsym.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"iternsym.c"
^
iternsym.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"iternsym.c"
^
iternsym.c:95:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC); 
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"iternsym.c"
^
iternsym.c:259:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"iternsym.c"
^
iternsym.c:260:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"iternsym.c"
^
iternsym.c:261:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"iternsym.c"
^
iternsym.c:262:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);  
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"iternsym.c"
^
iternsym.c:404:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:301:1: note: expanded from here
"iternsym.c"
^
iternsym.c:405:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"iternsym.c"
^
iternsym.c:406:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(s,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"iternsym.c"
^
iternsym.c:407:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"iternsym.c"
^
iternsym.c:507:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"iternsym.c"
^
iternsym.c:508:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"iternsym.c"
^
iternsym.c:607:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:321:1: note: expanded from here
"iternsym.c"
^
iternsym.c:608:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:323:1: note: expanded from here
"iternsym.c"
^
iternsym.c:688:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:335:1: note: expanded from here
"iternsym.c"
^
iternsym.c:689:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:337:1: note: expanded from here
"iternsym.c"
^
iternsym.c:690:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(rhs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:339:1: note: expanded from here
"iternsym.c"
^
iternsym.c:691:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"iternsym.c"
^
iternsym.c:692:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givc,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:4:1: note: expanded from here
"iternsym.c"
^
iternsym.c:696:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:6:1: note: expanded from here
"iternsym.c"
^
iternsym.c:697:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q,TYPE_MAT);            
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:8:1: note: expanded from here
"iternsym.c"
^
iternsym.c:709:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:10:1: note: expanded from here
"iternsym.c"
^
iternsym.c:921:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:12:1: note: expanded from here
"iternsym.c"
^
iternsym.c:922:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:14:1: note: expanded from here
"iternsym.c"
^
iternsym.c:923:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:16:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1005:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(As,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:26:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1006:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(alpha,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:28:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1007:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(beta,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:30:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1012:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(H,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:32:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1013:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:34:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1018:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:36:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1270:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:46:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1271:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:48:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:50:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1275:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(z,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:52:1: note: expanded from here
"iternsym.c"
^
39 warnings generated.
iternsym.c:87:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"iternsym.c"
^
iternsym.c:88:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"iternsym.c"
^
iternsym.c:89:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"iternsym.c"
^
iternsym.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"iternsym.c"
^
iternsym.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"iternsym.c"
^
iternsym.c:95:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC); 
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"iternsym.c"
^
iternsym.c:259:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"iternsym.c"
^
iternsym.c:260:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"iternsym.c"
^
iternsym.c:261:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"iternsym.c"
^
iternsym.c:262:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);  
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"iternsym.c"
^
iternsym.c:404:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:301:1: note: expanded from here
"iternsym.c"
^
iternsym.c:405:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"iternsym.c"
^
iternsym.c:406:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(s,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"iternsym.c"
^
iternsym.c:407:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"iternsym.c"
^
iternsym.c:507:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"iternsym.c"
^
iternsym.c:508:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"iternsym.c"
^
iternsym.c:607:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:321:1: note: expanded from here
"iternsym.c"
^
iternsym.c:608:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:323:1: note: expanded from here
"iternsym.c"
^
iternsym.c:688:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:335:1: note: expanded from here
"iternsym.c"
^
iternsym.c:689:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:337:1: note: expanded from here
"iternsym.c"
^
iternsym.c:690:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(rhs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:339:1: note: expanded from here
"iternsym.c"
^
iternsym.c:691:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"iternsym.c"
^
iternsym.c:692:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givc,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:4:1: note: expanded from here
"iternsym.c"
^
iternsym.c:696:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:6:1: note: expanded from here
"iternsym.c"
^
iternsym.c:697:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q,TYPE_MAT);            
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:8:1: note: expanded from here
"iternsym.c"
^
iternsym.c:709:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:10:1: note: expanded from here
"iternsym.c"
^
iternsym.c:921:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:12:1: note: expanded from here
"iternsym.c"
^
iternsym.c:922:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:14:1: note: expanded from here
"iternsym.c"
^
iternsym.c:923:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:16:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1005:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(As,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:26:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1006:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(alpha,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:28:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1007:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(beta,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:30:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1012:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(H,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:32:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1013:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:34:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1018:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:36:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1270:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:46:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1271:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:48:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:50:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1275:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(z,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:52:1: note: expanded from here
"iternsym.c"
^
39 warnings generated.
iternsym.c:87:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:259:1: note: expanded from here
"iternsym.c"
^
iternsym.c:88:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:261:1: note: expanded from here
"iternsym.c"
^
iternsym.c:89:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"iternsym.c"
^
iternsym.c:90:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"iternsym.c"
^
iternsym.c:91:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"iternsym.c"
^
iternsym.c:95:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC); 
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"iternsym.c"
^
iternsym.c:259:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:283:1: note: expanded from here
"iternsym.c"
^
iternsym.c:260:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(v,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"iternsym.c"
^
iternsym.c:261:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(w,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"iternsym.c"
^
iternsym.c:262:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);  
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"iternsym.c"
^
iternsym.c:404:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:301:1: note: expanded from here
"iternsym.c"
^
iternsym.c:405:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:303:1: note: expanded from here
"iternsym.c"
^
iternsym.c:406:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(s,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:305:1: note: expanded from here
"iternsym.c"
^
iternsym.c:407:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(tmp,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:307:1: note: expanded from here
"iternsym.c"
^
iternsym.c:507:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:317:1: note: expanded from here
"iternsym.c"
^
iternsym.c:508:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:319:1: note: expanded from here
"iternsym.c"
^
iternsym.c:607:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:321:1: note: expanded from here
"iternsym.c"
^
iternsym.c:608:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:323:1: note: expanded from here
"iternsym.c"
^
iternsym.c:688:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:335:1: note: expanded from here
"iternsym.c"
^
iternsym.c:689:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(u,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:337:1: note: expanded from here
"iternsym.c"
^
iternsym.c:690:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(rhs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:339:1: note: expanded from here
"iternsym.c"
^
iternsym.c:691:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givs,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:2:1: note: expanded from here
"iternsym.c"
^
iternsym.c:692:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(givc,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:4:1: note: expanded from here
"iternsym.c"
^
iternsym.c:696:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:6:1: note: expanded from here
"iternsym.c"
^
iternsym.c:697:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(Q,TYPE_MAT);            
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:8:1: note: expanded from here
"iternsym.c"
^
iternsym.c:709:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:10:1: note: expanded from here
"iternsym.c"
^
iternsym.c:921:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(R1,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:12:1: note: expanded from here
"iternsym.c"
^
iternsym.c:922:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:14:1: note: expanded from here
"iternsym.c"
^
iternsym.c:923:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r1,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:16:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1005:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(As,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:26:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1006:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(alpha,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:28:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1007:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(beta,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:30:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1012:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(H,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:32:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1013:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(N,TYPE_MAT);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:34:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1018:7: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
      MEM_STAT_REG(z,TYPE_VEC);
      ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:36:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1270:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(r,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:46:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1271:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(p,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:48:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1272:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(q,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:50:1: note: expanded from here
"iternsym.c"
^
iternsym.c:1275:4: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
   MEM_STAT_REG(z,TYPE_VEC);
   ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:52:1: note: expanded from here
"iternsym.c"
^
39 warnings generated.
ar ru meschach.a sparse.o sprow.o sparseio.o spchfctr.o splufctr.o spbkp.o spswap.o iter0.o itersym.o iternsym.o; ranlib meschach.a
ar: `u' modifier ignored since `D' is the default (see `U')
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zmachine.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zmachine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: zmachine.c,v 1.1 1994/01/13 04:25:41 des Exp $";
                         ^
1 warning generated.
zmachine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: zmachine.c,v 1.1 1994/01/13 04:25:41 des Exp $";
                         ^
1 warning generated.
zmachine.c:34:22: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
static  char    *rcsid = "$Id: zmachine.c,v 1.1 1994/01/13 04:25:41 des Exp $";
                         ^
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zcopy.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zmatio.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zmemory.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zmemory.c:458:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:458:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:458:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:476:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:476:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:476:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:508:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:508:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:508:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:526:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:526:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:526:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:557:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:557:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:557:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:578:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:578:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:578:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
6 warnings generated.
zmemory.c:458:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:458:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:458:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:476:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:476:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:476:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:508:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:508:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:508:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:526:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:526:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:526:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:557:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:557:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:557:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:578:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:578:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:578:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
6 warnings generated.
zmemory.c:458:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:458:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:458:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:476:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:476:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:476:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:508:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:508:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:508:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:526:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:526:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:526:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:557:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:557:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:557:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC **)) {   /* NULL ends the list*/
              ^
              ==
zmemory.c:578:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~~
zmemory.c:578:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
          (                       )
zmemory.c:578:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZMAT **)) {   /* NULL ends the list*/
              ^
              ==
6 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zvecop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zvecop.c:280:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
zvecop.c:280:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
          (                      )
zvecop.c:280:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
zvecop.c:280:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
zvecop.c:280:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
          (                      )
zvecop.c:280:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
zvecop.c:280:15: warning: using the result of an assignment as a condition without parentheses [-Wparentheses]
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
          ~~~~^~~~~~~~~~~~~~~~~~~
zvecop.c:280:15: note: place parentheses around the assignment to silence this warning
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
          (                      )
zvecop.c:280:15: note: use '==' to turn this assignment into an equality comparison
   while (par = va_arg(ap,ZVEC *)) {   /* NULL ends the list*/
              ^
              ==
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zmatop.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C znorm.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zfunc.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
ar ru meschach.a zmachine.o zcopy.o zmatio.o zmemory.o zvecop.o zmatop.o znorm.o zfunc.o ; ranlib meschach.a
ar: `u' modifier ignored since `D' is the default (see `U')
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zlufctr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zlufctr.c:59:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:194:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_ZMAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:195:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:196:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:197:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:237:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:238:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"zlufctr.c"
^
7 warnings generated.
zlufctr.c:59:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:194:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_ZMAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:195:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:196:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:197:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:237:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:238:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"zlufctr.c"
^
7 warnings generated.
zlufctr.c:59:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(scale,TYPE_VEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:194:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(A_cp,TYPE_ZMAT);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:195:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp, TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:196:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp2,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:271:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:197:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(pivot,TYPE_PERM);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:273:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:237:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:285:1: note: expanded from here
"zlufctr.c"
^
zlufctr.c:238:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(z,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:287:1: note: expanded from here
"zlufctr.c"
^
7 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zsolve.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zmatlab.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zhsehldr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zhsehldr.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zhsehldr.c"
^
1 warning generated.
zhsehldr.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zhsehldr.c"
^
1 warning generated.
zhsehldr.c:202:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zhsehldr.c"
^
1 warning generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zqrfctr.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zqrfctr.c:80:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:126:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:127:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:128:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:129:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:256:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:257:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:325:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:363:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:478:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"zqrfctr.c"
^
11 warnings generated.
zqrfctr.c:80:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:126:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:127:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:128:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:129:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:256:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:257:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:325:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:363:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:478:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"zqrfctr.c"
^
11 warnings generated.
zqrfctr.c:80:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:253:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:81:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:126:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:263:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:127:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:265:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:128:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(gamma,TYPE_VEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:267:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:129:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(w,   TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:269:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:256:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp1,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:279:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:257:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp2,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:281:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:325:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:289:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:363:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(tmp,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:295:1: note: expanded from here
"zqrfctr.c"
^
zqrfctr.c:478:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(y,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:309:1: note: expanded from here
"zqrfctr.c"
^
11 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zgivens.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zhessen.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zhessen.c:62:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"zhessen.c"
^
zhessen.c:63:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"zhessen.c"
^
zhessen.c:117:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp1,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"zhessen.c"
^
zhessen.c:118:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp2,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:77:1: note: expanded from here
"zhessen.c"
^
4 warnings generated.
zhessen.c:62:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"zhessen.c"
^
zhessen.c:63:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"zhessen.c"
^
zhessen.c:117:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp1,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"zhessen.c"
^
zhessen.c:118:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp2,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:77:1: note: expanded from here
"zhessen.c"
^
4 warnings generated.
zhessen.c:62:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(tmp1,TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:63:1: note: expanded from here
"zhessen.c"
^
zhessen.c:63:2: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        MEM_STAT_REG(w,   TYPE_ZVEC);
        ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:65:1: note: expanded from here
"zhessen.c"
^
zhessen.c:117:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp1,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:75:1: note: expanded from here
"zhessen.c"
^
zhessen.c:118:6: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
            MEM_STAT_REG(tmp2,TYPE_ZVEC);
            ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:77:1: note: expanded from here
"zhessen.c"
^
4 warnings generated.
dpcpp -c -O3 -DHAVE_CONFIG_H -DANSI_C zschur.c
clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
zschur.c:67:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zschur.c"
^
1 warning generated.
zschur.c:67:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zschur.c"
^
1 warning generated.
zschur.c:67:5: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
    MEM_STAT_REG(diag,TYPE_ZVEC);
    ^
./meminfo.h:137:74: note: expanded from macro 'MEM_STAT_REG'
#define MEM_STAT_REG(var,type)  mem_stat_reg_list((void **)&(var),type,0,__FILE__,__LINE__)
                                                                         ^
<scratch space>:255:1: note: expanded from here
"zschur.c"
^
1 warning generated.
ar ru meschach.a zlufctr.o zsolve.o zmatlab.o zhsehldr.o zqrfctr.o zgivens.o  zhessen.o zschur.o; ranlib meschach.a
ar: `u' modifier ignored since `D' is the default (see `U')
